{"ast":null,"code":"var _jsxFileName = \"/home/emad/code/video-chat-app/frontend/src/components/room.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Room = props => {\n  _s();\n\n  const userVideo = useRef();\n  const userStream = useRef();\n  const partnerVideo = useRef();\n  const peerRef = useRef();\n  const webSocketRef = useRef();\n\n  const openCamera = async () => {\n    const allDevices = await navigator.mediaDevices.enumerateDevices();\n    const cameras = allDevices.filter(device => device.kind == \"videoinput\");\n    const constraints = {\n      audio: true,\n      video: {\n        deviceId: cameras[0].deviceId\n      }\n    };\n\n    try {\n      return await navigator.mediaDevices.getUserMedia(constraints);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    openCamera().then(stream => {\n      userVideo.current.srcObject = stream;\n      userStream.current = stream;\n      webSocketRef.current = new WebSocket(`ws://localhost:8000/join?roomID=${props.match.params.roomID}`);\n      webSocketRef.current.adEventListener(\"open\", () => {\n        webSocketRef.current.send(JSON.stringify({\n          join: true\n        }));\n        ;\n      });\n      webSocketRef.current.addEventListener(\"message\", async e => {\n        const message = JSON.parse(e.data);\n\n        if (message.join) {\n          callUser();\n        }\n\n        if (message.offer) {\n          handleOffer(message.offer);\n        }\n\n        if (message.answer) {\n          console.log(\"Receiving Answer\");\n          peerRef.current.setRemoteDescription(new RTCSessionDescription(message.answer));\n        }\n\n        if (message.iceCandidate) {\n          console.log(\"Receieving and adding ice candidates\");\n\n          try {\n            await peerRef.current.addIceCandidate(message.iceCandidate);\n          } catch (err) {\n            console.log(\"Error receieiving ice candidate:\", err);\n          }\n        }\n      });\n    });\n  });\n\n  const handleOffer = async offer => {\n    console.log(\"Receieved offer and Creating Answer\");\n    peerRef.current = createPeer();\n    await peerRef.current.setRemoteDescription(new RTCSessionDescription(offer)); // const desc = new RTCSessionDescription(offer)\n\n    userStream.current.getTracks().forEach(track => {\n      peerRef.current.addTrack(track, userStream.current);\n    });\n    const answer = await peerRef.current.createAnswer();\n    await peerRef.current.setLocalDescription(answer);\n    webSocketRef.current.send(JSON.stringify({\n      offer: peerRef.current.localDescription\n    }));\n  };\n\n  const callUser = () => {\n    console.log('Calling other User');\n    peerRef.current = createPeer();\n    userStream.current.getTracks().forEach(track => {\n      peerRef.current.addTrack(track, userStream.current);\n    });\n  };\n\n  const createPeer = () => {\n    console.log(\"Creating Peer connection\");\n    const peer = new RTCPeerConnection({\n      iceServers: [{\n        urls: \"stun:stun.l.google.com:19382\"\n      }]\n    });\n    peer.onnegotiationneeded = handleNegotiationNeeded;\n    peer.onicecandidate = handleIceCandidateEvent;\n    peer.ontrack = handleTrackEvent;\n    return peer;\n  };\n\n  const handleNegotiationNeeded = async () => {\n    console.log(\"creating offer\");\n\n    try {\n      const myOffer = await peerRef.current.createOffer();\n      await peerRef.current.setLocalDescription(myOffer);\n      webSocketRef.current.send(JSON.stringify({\n        offer: peerRef.current.localDescription\n      }));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const handleIceCandidateEvent = e => {\n    console.log(\"Found ice candidate\");\n\n    if (e.candidate) {\n      console.log(e.candidate);\n      webSocketRef.current.send(JSON.stringify({\n        iceCandidate: e.candidate\n      }));\n    }\n  };\n\n  const handleTrackEvent = e => {\n    console.log(\"Received tracks\");\n    partnerVideo.current.srcObject = e.streams[0];\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      autoPlay: true,\n      controls: true,\n      ref: userVideo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      autoPlay: true,\n      controls: true,\n      ref: partnerVideo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Room, \"yjYgNenTnD5kxzbzWGJjujs2HE8=\");\n\n_c = Room;\nexport default Room;\n\nvar _c;\n\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"sources":["/home/emad/code/video-chat-app/frontend/src/components/room.js"],"names":["React","useEffect","useRef","Room","props","userVideo","userStream","partnerVideo","peerRef","webSocketRef","openCamera","allDevices","navigator","mediaDevices","enumerateDevices","cameras","filter","device","kind","constraints","audio","video","deviceId","getUserMedia","err","console","log","then","stream","current","srcObject","WebSocket","match","params","roomID","adEventListener","send","JSON","stringify","join","addEventListener","e","message","parse","data","callUser","offer","handleOffer","answer","setRemoteDescription","RTCSessionDescription","iceCandidate","addIceCandidate","createPeer","getTracks","forEach","track","addTrack","createAnswer","setLocalDescription","localDescription","peer","RTCPeerConnection","iceServers","urls","onnegotiationneeded","handleNegotiationNeeded","onicecandidate","handleIceCandidateEvent","ontrack","handleTrackEvent","myOffer","createOffer","candidate","streams"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useEffect, useRef } from 'react';\n\n\nconst Room = (props) => {\n    const userVideo = useRef();\n    const userStream = useRef();\n    const partnerVideo = useRef();\n    const peerRef = useRef();\n    const webSocketRef = useRef();\n    const openCamera = async () => {\n        const allDevices = await navigator.mediaDevices.enumerateDevices()\n        const cameras = allDevices.filter((device) => device.kind == \"videoinput\"\n        );\n        const  constraints = {\n            audio: true,\n            video: {\n                deviceId: cameras[0].deviceId\n            },\n        };\n        try {\n            return await navigator.mediaDevices.getUserMedia(constraints)\n        } catch (err) {\n            console.log(err)                        \n        }\n    };    \n    \n\n\n    useEffect(() => {\n        openCamera().then((stream) => {\n            userVideo.current.srcObject =  stream\n            userStream.current = stream     \n            webSocketRef.current = new WebSocket(\n                `ws://localhost:8000/join?roomID=${props.match.params.roomID}`\n            ); \n            webSocketRef.current.adEventListener(\"open\", () => {\n                webSocketRef.current.send(JSON.stringify({join:true}));;\n\n            })\n            webSocketRef.current.addEventListener(\"message\",async (e) => {\n                const message = JSON.parse(e.data)\n\n                if (message.join) {\n                    callUser();\n\n                }\n                if (message.offer) {\n                    handleOffer(message.offer)\n\n                }\n                if (message.answer) {\n                    console.log(\"Receiving Answer\")\n                    peerRef.current.setRemoteDescription(\n                        new RTCSessionDescription(message.answer)\n                    );\n\n                }\n                if (message.iceCandidate) {\n                    console.log(\"Receieving and adding ice candidates\")\n                    try {\n                        await peerRef.current.addIceCandidate(message.iceCandidate)\n                    } catch (err) {\n                        console.log(\"Error receieiving ice candidate:\",err)\n\n                    }\n\n                }\n                \n\n\n            })\n            \n        });\n        \n\n    });\n    const handleOffer = async (offer) => {\n        console.log(\"Receieved offer and Creating Answer\")\n        peerRef.current = createPeer();\n        await peerRef.current.setRemoteDescription(new RTCSessionDescription(offer));\n        // const desc = new RTCSessionDescription(offer)\n        userStream.current.getTracks().forEach((track) => {\n            peerRef.current.addTrack(track,userStream.current)\n        });\n        const answer = await peerRef.current.createAnswer();\n        await peerRef.current.setLocalDescription(answer);\n        webSocketRef.current.send(\n            JSON.stringify({offer:peerRef.current.localDescription}));\n       \n    }\n    const callUser = () => {\n        console.log('Calling other User')\n        peerRef.current = createPeer()\n        userStream.current.getTracks().forEach((track) => {\n            peerRef.current.addTrack(track,userStream.current)\n        });\n    };\n\n    const createPeer = () => {\n        console.log(\"Creating Peer connection\")\n        const peer = new RTCPeerConnection({\n            iceServers: [{urls:\"stun:stun.l.google.com:19382\"}],\n        });\n        peer.onnegotiationneeded = handleNegotiationNeeded;\n        peer.onicecandidate = handleIceCandidateEvent;\n        peer.ontrack = handleTrackEvent;\n        return peer\n    };\n\n    const handleNegotiationNeeded = async () => {\n        console.log(\"creating offer\")\n        try {\n            const myOffer = await peerRef.current.createOffer();\n            await peerRef.current.setLocalDescription(myOffer);\n            webSocketRef.current.send(\n                JSON.stringify({offer:peerRef.current.localDescription}));\n\n        } catch(err) {\n            console.log(err)\n        }\n\n    }\n    const handleIceCandidateEvent = (e) => {\n        console.log(\"Found ice candidate\")\n        if (e.candidate) {\n            console.log(e.candidate)\n            webSocketRef.current.send(JSON.stringify({iceCandidate:e.candidate}));\n        }\n\n    }\n    const handleTrackEvent = (e) => {\n        console.log(\"Received tracks\")\n        partnerVideo.current.srcObject = e.streams[0]\n    }\n\n    return (\n        <div>\n            <video autoPlay controls={true} ref={userVideo}></video>\n            <video autoPlay controls={true} ref={partnerVideo}></video>\n        </div>\n    )\n}\nexport default Room;"]},"metadata":{},"sourceType":"module"}